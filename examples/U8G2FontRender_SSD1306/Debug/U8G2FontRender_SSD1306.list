
U8G2FontRender_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003024  08003024  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003024  08003024  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003024  08003024  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003024  08003024  00013024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800302c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000008c  080030b8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080030b8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009157  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fd  00000000  00000000  0002920c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  0002a910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002b088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016de9  00000000  00000000  0002b778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006db4  00000000  00000000  00042561  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000817e8  00000000  00000000  00049315  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caafd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea0  00000000  00000000  000cab78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002674 	.word	0x08002674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002674 	.word	0x08002674

0800014c <SSD1306_I2C_Write>:
#define SSD1306_WriteCommand(display, command)  SSD1306_I2C_Write((display), 0x00, (command))
#define SSD1306_WriteData(display, data)        SSD1306_I2C_Write((display), 0x40, (data))

//static uint8_t buffer_with_cmd[128 * 64 / 8 + 1] = {0}, *buffer = buffer_with_cmd + 1;

HAL_StatusTypeDef SSD1306_I2C_Write(SSD1306_HandleTypeDef *disp, uint8_t reg, uint8_t data) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2] = {reg, data};
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	733b      	strb	r3, [r7, #12]
 8000160:	78bb      	ldrb	r3, [r7, #2]
 8000162:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Master_Transmit(disp->hi2c, disp->addr, dt, 2, SSD1306_I2C_TIMEOUT);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	6818      	ldr	r0, [r3, #0]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	791b      	ldrb	r3, [r3, #4]
 800016c:	b299      	uxth	r1, r3
 800016e:	f107 020c 	add.w	r2, r7, #12
 8000172:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000176:	9300      	str	r3, [sp, #0]
 8000178:	2302      	movs	r3, #2
 800017a:	f001 f98d 	bl	8001498 <HAL_I2C_Master_Transmit>
 800017e:	4603      	mov	r3, r0
}
 8000180:	4618      	mov	r0, r3
 8000182:	3710      	adds	r7, #16
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <SSD1306_Init>:
	0x8D,  // DC-DC enable
	0x14,
	0xAF,  // display on
};

HAL_StatusTypeDef SSD1306_Init(SSD1306_HandleTypeDef *disp) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_IsDeviceReady(disp->hi2c, disp->addr, 5, 1000) != HAL_OK) {
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	6818      	ldr	r0, [r3, #0]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	791b      	ldrb	r3, [r3, #4]
 8000198:	b299      	uxth	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	2205      	movs	r2, #5
 80001a0:	f001 fa78 	bl	8001694 <HAL_I2C_IsDeviceReady>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <SSD1306_Init+0x26>
		return HAL_ERROR;
 80001aa:	2301      	movs	r3, #1
 80001ac:	e03a      	b.n	8000224 <SSD1306_Init+0x9c>
	}

	disp->buffer = malloc(disp->height * disp->width / 8 + 1);
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	799b      	ldrb	r3, [r3, #6]
 80001b2:	461a      	mov	r2, r3
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	795b      	ldrb	r3, [r3, #5]
 80001b8:	fb03 f302 	mul.w	r3, r3, r2
 80001bc:	2b00      	cmp	r3, #0
 80001be:	da00      	bge.n	80001c2 <SSD1306_Init+0x3a>
 80001c0:	3307      	adds	r3, #7
 80001c2:	10db      	asrs	r3, r3, #3
 80001c4:	3301      	adds	r3, #1
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 f9cc 	bl	8002564 <malloc>
 80001cc:	4603      	mov	r3, r0
 80001ce:	461a      	mov	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	609a      	str	r2, [r3, #8]

	if (disp->height == 32) {
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	799b      	ldrb	r3, [r3, #6]
 80001d8:	2b20      	cmp	r3, #32
 80001da:	d103      	bne.n	80001e4 <SSD1306_Init+0x5c>
		init_script[22] = 0x02;
 80001dc:	4b13      	ldr	r3, [pc, #76]	; (800022c <SSD1306_Init+0xa4>)
 80001de:	2202      	movs	r2, #2
 80001e0:	759a      	strb	r2, [r3, #22]
 80001e2:	e006      	b.n	80001f2 <SSD1306_Init+0x6a>
	} else if (disp->height == 64) {
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	799b      	ldrb	r3, [r3, #6]
 80001e8:	2b40      	cmp	r3, #64	; 0x40
 80001ea:	d102      	bne.n	80001f2 <SSD1306_Init+0x6a>
		init_script[22] = 0x12;
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <SSD1306_Init+0xa4>)
 80001ee:	2212      	movs	r2, #18
 80001f0:	759a      	strb	r2, [r3, #22]
	}

	for (uint8_t i=0; i<sizeof(init_script); i++) {
 80001f2:	2300      	movs	r3, #0
 80001f4:	73fb      	strb	r3, [r7, #15]
 80001f6:	e00a      	b.n	800020e <SSD1306_Init+0x86>
		SSD1306_WriteCommand(disp, init_script[i]);
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	4a0c      	ldr	r2, [pc, #48]	; (800022c <SSD1306_Init+0xa4>)
 80001fc:	5cd3      	ldrb	r3, [r2, r3]
 80001fe:	461a      	mov	r2, r3
 8000200:	2100      	movs	r1, #0
 8000202:	6878      	ldr	r0, [r7, #4]
 8000204:	f7ff ffa2 	bl	800014c <SSD1306_I2C_Write>
	for (uint8_t i=0; i<sizeof(init_script); i++) {
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	3301      	adds	r3, #1
 800020c:	73fb      	strb	r3, [r7, #15]
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	2b1b      	cmp	r3, #27
 8000212:	d9f1      	bls.n	80001f8 <SSD1306_Init+0x70>
	}

	SSD1306_Fill(disp, SSD1306_COLOR_BLACK);
 8000214:	2100      	movs	r1, #0
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 f832 	bl	8000280 <SSD1306_Fill>
	SSD1306_Update(disp);
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f000 f807 	bl	8000230 <SSD1306_Update>

	return HAL_OK;
 8000222:	2300      	movs	r3, #0
}
 8000224:	4618      	mov	r0, r3
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000000 	.word	0x20000000

08000230 <SSD1306_Update>:

HAL_StatusTypeDef SSD1306_Update(SSD1306_HandleTypeDef *disp) {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b085      	sub	sp, #20
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
//	buffer_with_cmd[0] = 0x40;
	disp->buffer[0] = 0x40;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	2240      	movs	r2, #64	; 0x40
 800023e:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Master_Transmit(disp->hi2c, disp->addr, disp->buffer, disp->width * disp->height / 8 + 1, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6818      	ldr	r0, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	791b      	ldrb	r3, [r3, #4]
 8000248:	b299      	uxth	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689a      	ldr	r2, [r3, #8]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	795b      	ldrb	r3, [r3, #5]
 8000252:	461c      	mov	r4, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	799b      	ldrb	r3, [r3, #6]
 8000258:	fb03 f304 	mul.w	r3, r3, r4
 800025c:	2b00      	cmp	r3, #0
 800025e:	da00      	bge.n	8000262 <SSD1306_Update+0x32>
 8000260:	3307      	adds	r3, #7
 8000262:	10db      	asrs	r3, r3, #3
 8000264:	b29b      	uxth	r3, r3
 8000266:	3301      	adds	r3, #1
 8000268:	b29c      	uxth	r4, r3
 800026a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	4623      	mov	r3, r4
 8000272:	f001 f911 	bl	8001498 <HAL_I2C_Master_Transmit>
 8000276:	4603      	mov	r3, r0
//			HAL_Delay(5);
//		}
//	}
//
//	return stat;
}
 8000278:	4618      	mov	r0, r3
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	bd90      	pop	{r4, r7, pc}

08000280 <SSD1306_Fill>:

HAL_StatusTypeDef SSD1306_Fill(SSD1306_HandleTypeDef *disp, uint8_t color) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	memset(disp->buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, disp->width * disp->height / 8 + 1);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6898      	ldr	r0, [r3, #8]
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d101      	bne.n	800029a <SSD1306_Fill+0x1a>
 8000296:	2100      	movs	r1, #0
 8000298:	e000      	b.n	800029c <SSD1306_Fill+0x1c>
 800029a:	21ff      	movs	r1, #255	; 0xff
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	461a      	mov	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	799b      	ldrb	r3, [r3, #6]
 80002a6:	fb03 f302 	mul.w	r3, r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	da00      	bge.n	80002b0 <SSD1306_Fill+0x30>
 80002ae:	3307      	adds	r3, #7
 80002b0:	10db      	asrs	r3, r3, #3
 80002b2:	3301      	adds	r3, #1
 80002b4:	461a      	mov	r2, r3
 80002b6:	f002 f968 	bl	800258a <memset>

	return HAL_OK;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <SSD1306_DrawPixel>:

HAL_StatusTypeDef SSD1306_DrawPixel(SSD1306_HandleTypeDef *disp, uint8_t x, uint8_t y, uint8_t color) {
 80002c4:	b490      	push	{r4, r7}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	4608      	mov	r0, r1
 80002ce:	4611      	mov	r1, r2
 80002d0:	461a      	mov	r2, r3
 80002d2:	4603      	mov	r3, r0
 80002d4:	70fb      	strb	r3, [r7, #3]
 80002d6:	460b      	mov	r3, r1
 80002d8:	70bb      	strb	r3, [r7, #2]
 80002da:	4613      	mov	r3, r2
 80002dc:	707b      	strb	r3, [r7, #1]
	if (x >= disp->width || y >= disp->height) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	795b      	ldrb	r3, [r3, #5]
 80002e2:	78fa      	ldrb	r2, [r7, #3]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d204      	bcs.n	80002f2 <SSD1306_DrawPixel+0x2e>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	799b      	ldrb	r3, [r3, #6]
 80002ec:	78ba      	ldrb	r2, [r7, #2]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d301      	bcc.n	80002f6 <SSD1306_DrawPixel+0x32>
		return HAL_ERROR;
 80002f2:	2301      	movs	r3, #1
 80002f4:	e050      	b.n	8000398 <SSD1306_DrawPixel+0xd4>
	}

	if (color == SSD1306_COLOR_WHITE) {
 80002f6:	787b      	ldrb	r3, [r7, #1]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d125      	bne.n	8000348 <SSD1306_DrawPixel+0x84>
		disp->buffer[x + (y / 8) * disp->width + 1] |= 1 << (y % 8);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689a      	ldr	r2, [r3, #8]
 8000300:	78f9      	ldrb	r1, [r7, #3]
 8000302:	78bb      	ldrb	r3, [r7, #2]
 8000304:	08db      	lsrs	r3, r3, #3
 8000306:	b2d8      	uxtb	r0, r3
 8000308:	4604      	mov	r4, r0
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	fb03 f304 	mul.w	r3, r3, r4
 8000312:	440b      	add	r3, r1
 8000314:	3301      	adds	r3, #1
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25a      	sxtb	r2, r3
 800031c:	78bb      	ldrb	r3, [r7, #2]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	2101      	movs	r1, #1
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	4313      	orrs	r3, r2
 800032c:	b25c      	sxtb	r4, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	78f9      	ldrb	r1, [r7, #3]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	fb03 f300 	mul.w	r3, r3, r0
 800033c:	440b      	add	r3, r1
 800033e:	3301      	adds	r3, #1
 8000340:	4413      	add	r3, r2
 8000342:	b2e2      	uxtb	r2, r4
 8000344:	701a      	strb	r2, [r3, #0]
 8000346:	e026      	b.n	8000396 <SSD1306_DrawPixel+0xd2>
	} else {
		disp->buffer[x + (y / 8) * disp->width + 1] &= ~(1 << (y % 8));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	78f9      	ldrb	r1, [r7, #3]
 800034e:	78bb      	ldrb	r3, [r7, #2]
 8000350:	08db      	lsrs	r3, r3, #3
 8000352:	b2d8      	uxtb	r0, r3
 8000354:	4604      	mov	r4, r0
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	795b      	ldrb	r3, [r3, #5]
 800035a:	fb03 f304 	mul.w	r3, r3, r4
 800035e:	440b      	add	r3, r1
 8000360:	3301      	adds	r3, #1
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b25a      	sxtb	r2, r3
 8000368:	78bb      	ldrb	r3, [r7, #2]
 800036a:	f003 0307 	and.w	r3, r3, #7
 800036e:	2101      	movs	r1, #1
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	b25b      	sxtb	r3, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	b25b      	sxtb	r3, r3
 800037a:	4013      	ands	r3, r2
 800037c:	b25c      	sxtb	r4, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	78f9      	ldrb	r1, [r7, #3]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	795b      	ldrb	r3, [r3, #5]
 8000388:	fb03 f300 	mul.w	r3, r3, r0
 800038c:	440b      	add	r3, r1
 800038e:	3301      	adds	r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	b2e2      	uxtb	r2, r4
 8000394:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bc90      	pop	{r4, r7}
 80003a0:	4770      	bx	lr
	...

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fc9d 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f841 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 f8a9 	bl	8000508 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003b6:	f000 f879 	bl	80004ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_SSD1306_Init();
 80003ba:	f000 f8c7 	bl	800054c <MX_SSD1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  U8G2FontRender_t font = U8G2FontRender(u8g2_font_profont12_tf, &SSD1306_DrawFgPixel, &SSD1306_DrawBgPixel);
 80003be:	1d38      	adds	r0, r7, #4
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <main+0x6c>)
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <main+0x70>)
 80003c4:	4914      	ldr	r1, [pc, #80]	; (8000418 <main+0x74>)
 80003c6:	f000 f9dd 	bl	8000784 <U8G2FontRender>

  U8G2FontRender_Print(&font, 0, 10, "ABCDEFGHIJKLMNOPQR");
 80003ca:	1d38      	adds	r0, r7, #4
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <main+0x78>)
 80003ce:	220a      	movs	r2, #10
 80003d0:	2100      	movs	r1, #0
 80003d2:	f000 fa93 	bl	80008fc <U8G2FontRender_Print>
  U8G2FontRender_Print(&font, 0, 20, "STUVWXYZ,.'`_");
 80003d6:	1d38      	adds	r0, r7, #4
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <main+0x7c>)
 80003da:	2214      	movs	r2, #20
 80003dc:	2100      	movs	r1, #0
 80003de:	f000 fa8d 	bl	80008fc <U8G2FontRender_Print>

  U8G2FontRender_Print(&font, 0, 30, "abcdefghijklmnopqr");
 80003e2:	1d38      	adds	r0, r7, #4
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <main+0x80>)
 80003e6:	221e      	movs	r2, #30
 80003e8:	2100      	movs	r1, #0
 80003ea:	f000 fa87 	bl	80008fc <U8G2FontRender_Print>
  U8G2FontRender_Print(&font, 0, 40, "stuvwxyz,.=+-~");
 80003ee:	1d38      	adds	r0, r7, #4
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <main+0x84>)
 80003f2:	2228      	movs	r2, #40	; 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	f000 fa81 	bl	80008fc <U8G2FontRender_Print>

  U8G2FontRender_Print(&font, 0, 50, "<>?/;:[]{}!@#$%^&*()");
 80003fa:	1d38      	adds	r0, r7, #4
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <main+0x88>)
 80003fe:	2232      	movs	r2, #50	; 0x32
 8000400:	2100      	movs	r1, #0
 8000402:	f000 fa7b 	bl	80008fc <U8G2FontRender_Print>

  SSD1306_Update(&display);
 8000406:	480a      	ldr	r0, [pc, #40]	; (8000430 <main+0x8c>)
 8000408:	f7ff ff12 	bl	8000230 <SSD1306_Update>
  while (1)
 800040c:	e7fe      	b.n	800040c <main+0x68>
 800040e:	bf00      	nop
 8000410:	080005a5 	.word	0x080005a5
 8000414:	0800057d 	.word	0x0800057d
 8000418:	08002700 	.word	0x08002700
 800041c:	0800268c 	.word	0x0800268c
 8000420:	080026a0 	.word	0x080026a0
 8000424:	080026b0 	.word	0x080026b0
 8000428:	080026c4 	.word	0x080026c4
 800042c:	080026d4 	.word	0x080026d4
 8000430:	20000108 	.word	0x20000108

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b090      	sub	sp, #64	; 0x40
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 f8a1 	bl	800258a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000456:	2302      	movs	r3, #2
 8000458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045e:	2310      	movs	r3, #16
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fc48 	bl	8001d00 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000476:	f000 f8a9 	bl	80005cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 feb4 	bl	8002200 <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800049e:	f000 f895 	bl	80005cc <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <MX_I2C1_Init+0x50>)
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <MX_I2C1_Init+0x54>)
 80004b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_I2C1_Init+0x50>)
 80004b8:	4a12      	ldr	r2, [pc, #72]	; (8000504 <MX_I2C1_Init+0x58>)
 80004ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_I2C1_Init+0x50>)
 80004ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <MX_I2C1_Init+0x50>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_I2C1_Init+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <MX_I2C1_Init+0x50>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_I2C1_Init+0x50>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_I2C1_Init+0x50>)
 80004ea:	f000 fe9d 	bl	8001228 <HAL_I2C_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f4:	f000 f86a 	bl	80005cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	200000b4 	.word	0x200000b4
 8000500:	40005400 	.word	0x40005400
 8000504:	000186a0 	.word	0x000186a0

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_GPIO_Init+0x40>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <MX_GPIO_Init+0x40>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_GPIO_Init+0x40>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_GPIO_Init+0x40>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <MX_GPIO_Init+0x40>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_GPIO_Init+0x40>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <MX_SSD1306_Init>:

/* USER CODE BEGIN 4 */
void MX_SSD1306_Init() {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	display.hi2c = &hi2c1;
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_SSD1306_Init+0x28>)
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <MX_SSD1306_Init+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
	display.addr = 0x78;  // 0x7A
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_SSD1306_Init+0x28>)
 8000558:	2278      	movs	r2, #120	; 0x78
 800055a:	711a      	strb	r2, [r3, #4]
	display.width = 128;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <MX_SSD1306_Init+0x28>)
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	715a      	strb	r2, [r3, #5]
	display.height = 64;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <MX_SSD1306_Init+0x28>)
 8000564:	2240      	movs	r2, #64	; 0x40
 8000566:	719a      	strb	r2, [r3, #6]
	SSD1306_Init(&display);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <MX_SSD1306_Init+0x28>)
 800056a:	f7ff fe0d 	bl	8000188 <SSD1306_Init>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000108 	.word	0x20000108
 8000578:	200000b4 	.word	0x200000b4

0800057c <SSD1306_DrawFgPixel>:

void SSD1306_DrawFgPixel(uint8_t x, uint8_t y) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	SSD1306_DrawPixel(&display, x, y, SSD1306_COLOR_WHITE);
 800058c:	79ba      	ldrb	r2, [r7, #6]
 800058e:	79f9      	ldrb	r1, [r7, #7]
 8000590:	2301      	movs	r3, #1
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <SSD1306_DrawFgPixel+0x24>)
 8000594:	f7ff fe96 	bl	80002c4 <SSD1306_DrawPixel>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000108 	.word	0x20000108

080005a4 <SSD1306_DrawBgPixel>:

void SSD1306_DrawBgPixel(uint8_t x, uint8_t y) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
	SSD1306_DrawPixel(&display, x, y, SSD1306_COLOR_BLACK);
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	79f9      	ldrb	r1, [r7, #7]
 80005b8:	2300      	movs	r3, #0
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <SSD1306_DrawBgPixel+0x24>)
 80005bc:	f7ff fe82 	bl	80002c4 <SSD1306_DrawPixel>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000108 	.word	0x20000108

080005cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_MspInit+0x5c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <HAL_MspInit+0x5c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_MspInit+0x5c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x5c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x5c>)
 80005fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x5c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_MspInit+0x60>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_MspInit+0x60>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	40010000 	.word	0x40010000

0800063c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <HAL_I2C_MspInit+0x70>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d123      	bne.n	80006a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 8000662:	f043 0308 	orr.w	r3, r3, #8
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0308 	and.w	r3, r3, #8
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000674:	23c0      	movs	r3, #192	; 0xc0
 8000676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000678:	2312      	movs	r3, #18
 800067a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4619      	mov	r1, r3
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <HAL_I2C_MspInit+0x78>)
 8000688:	f000 fc74 	bl	8000f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 8000692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000696:	61d3      	str	r3, [r2, #28]
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_I2C_MspInit+0x74>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <HardFault_Handler+0x4>

080006ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <BusFault_Handler+0x4>

080006d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 fb36 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000714:	4a14      	ldr	r2, [pc, #80]	; (8000768 <_sbrk+0x5c>)
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <_sbrk+0x60>)
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <_sbrk+0x64>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <_sbrk+0x68>)
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <_sbrk+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4413      	add	r3, r2
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d207      	bcs.n	800074c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800073c:	f001 fee8 	bl	8002510 <__errno>
 8000740:	4602      	mov	r2, r0
 8000742:	230c      	movs	r3, #12
 8000744:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800074a:	e009      	b.n	8000760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <_sbrk+0x64>)
 800075c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800075e:	68fb      	ldr	r3, [r7, #12]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20005000 	.word	0x20005000
 800076c:	00000400 	.word	0x00000400
 8000770:	200000a8 	.word	0x200000a8
 8000774:	20000120 	.word	0x20000120

08000778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <U8G2FontRender>:
uint8_t font_draw_start_x_position(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph);
uint8_t font_draw_start_y_position(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph);
void font_render_glyph(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph, uint8_t x, uint8_t y);


U8G2FontRender_t U8G2FontRender(const uint8_t *data, fnDrawPixel drawFgPixel, fnDrawPixel drawBgPixel) {
 8000784:	b5b0      	push	{r4, r5, r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
 800078a:	6278      	str	r0, [r7, #36]	; 0x24
 800078c:	6239      	str	r1, [r7, #32]
 800078e:	61fa      	str	r2, [r7, #28]
 8000790:	61bb      	str	r3, [r7, #24]
	U8G2FontRender_t font = {
 8000792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000796:	2224      	movs	r2, #36	; 0x24
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fef5 	bl	800258a <memset>
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
			.data = data,
			.drawFgPixel = drawFgPixel,
			.drawBgPixel = drawBgPixel,
	};

	font.header = U8G2FontRender_ParseHeader(&font);
 80007ac:	463b      	mov	r3, r7
 80007ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f819 	bl	80007ec <U8G2FontRender_ParseHeader>
 80007ba:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80007be:	463d      	mov	r5, r7
 80007c0:	6828      	ldr	r0, [r5, #0]
 80007c2:	6869      	ldr	r1, [r5, #4]
 80007c4:	68aa      	ldr	r2, [r5, #8]
 80007c6:	68eb      	ldr	r3, [r5, #12]
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	6928      	ldr	r0, [r5, #16]
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	c403      	stmia	r4!, {r0, r1}

	return font;
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	461d      	mov	r5, r3
 80007d4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80007d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	602b      	str	r3, [r5, #0]
}
 80007e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007e6:	3750      	adds	r7, #80	; 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bdb0      	pop	{r4, r5, r7, pc}

080007ec <U8G2FontRender_ParseHeader>:

U8G2FontHeader_t U8G2FontRender_ParseHeader(U8G2FontRender_t *font) {
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	U8G2FontHeader_t header;

	memcpy(&header, font->data, U8G2_FONT_HEADER_SIZE);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	6999      	ldr	r1, [r3, #24]
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2217      	movs	r2, #23
 8000800:	4618      	mov	r0, r3
 8000802:	f001 feb7 	bl	8002574 <memcpy>
	header.offset_A = U8G2_FONT_HEADER_SIZE + (font->data[17] << 8 | font->data[18]);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	3311      	adds	r3, #17
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	3312      	adds	r3, #18
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29b      	uxth	r3, r3
 8000822:	3317      	adds	r3, #23
 8000824:	b29b      	uxth	r3, r3
 8000826:	837b      	strh	r3, [r7, #26]
	header.offset_a = U8G2_FONT_HEADER_SIZE + (font->data[19] << 8 | font->data[20]);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	3313      	adds	r3, #19
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b21a      	sxth	r2, r3
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	3314      	adds	r3, #20
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29b      	uxth	r3, r3
 8000844:	3317      	adds	r3, #23
 8000846:	b29b      	uxth	r3, r3
 8000848:	83bb      	strh	r3, [r7, #28]
	header.offset_0x100 = U8G2_FONT_HEADER_SIZE + (font->data[21] << 8 | font->data[22]);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	3315      	adds	r3, #21
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	b21a      	sxth	r2, r3
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	3316      	adds	r3, #22
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21b      	sxth	r3, r3
 8000864:	b29b      	uxth	r3, r3
 8000866:	3317      	adds	r3, #23
 8000868:	b29b      	uxth	r3, r3
 800086a:	83fb      	strh	r3, [r7, #30]

	return header;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	461d      	mov	r5, r3
 8000870:	f107 0408 	add.w	r4, r7, #8
 8000874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000876:	6028      	str	r0, [r5, #0]
 8000878:	6069      	str	r1, [r5, #4]
 800087a:	60aa      	str	r2, [r5, #8]
 800087c:	60eb      	str	r3, [r5, #12]
 800087e:	cc03      	ldmia	r4!, {r0, r1}
 8000880:	6128      	str	r0, [r5, #16]
 8000882:	6169      	str	r1, [r5, #20]
}
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bdb0      	pop	{r4, r5, r7, pc}

0800088c <U8G2FontRender_PrintChar>:

void U8G2FontRender_PrintChar(U8G2FontRender_t *font, uint8_t *x, uint8_t y, char chr) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4611      	mov	r1, r2
 8000898:	461a      	mov	r2, r3
 800089a:	460b      	mov	r3, r1
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	4613      	mov	r3, r2
 80008a0:	71bb      	strb	r3, [r7, #6]
	uint16_t search_position = font_get_start_symbol_search_postition(font, chr);
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	4619      	mov	r1, r3
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f000 f8a9 	bl	80009fe <font_get_start_symbol_search_postition>
 80008ac:	4603      	mov	r3, r0
 80008ae:	83fb      	strh	r3, [r7, #30]

	U8G2FontGlyph_t glyph;
	if (font_get_glyph(font, &glyph, search_position, chr) != U8G2FontRender_OK) {
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	8bfa      	ldrh	r2, [r7, #30]
 80008b4:	f107 0110 	add.w	r1, r7, #16
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f000 f8c1 	bl	8000a40 <font_get_glyph>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d117      	bne.n	80008f4 <U8G2FontRender_PrintChar+0x68>
		return;
	}
	font_parse_glyph_header(font, &glyph);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f8ee 	bl	8000aac <font_parse_glyph_header>

	font_render_glyph(font, &glyph, *x, y);
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f107 0110 	add.w	r1, r7, #16
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f000 f947 	bl	8000b6e <font_render_glyph>

	*x += glyph.pitch;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e000      	b.n	80008f6 <U8G2FontRender_PrintChar+0x6a>
		return;
 80008f4:	bf00      	nop
}
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <U8G2FontRender_Print>:

void U8G2FontRender_Print(U8G2FontRender_t *font, uint8_t x, uint8_t y, char *str) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	72fb      	strb	r3, [r7, #11]
 800090a:	4613      	mov	r3, r2
 800090c:	72bb      	strb	r3, [r7, #10]
	while (*str) {
 800090e:	e00b      	b.n	8000928 <U8G2FontRender_Print+0x2c>
		char *chr = str++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	607a      	str	r2, [r7, #4]
 8000916:	617b      	str	r3, [r7, #20]
		if (*chr < 0x100) {
			U8G2FontRender_PrintChar(font, &x, y, *chr);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	7aba      	ldrb	r2, [r7, #10]
 800091e:	f107 010b 	add.w	r1, r7, #11
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f7ff ffb2 	bl	800088c <U8G2FontRender_PrintChar>
	while (*str) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ef      	bne.n	8000910 <U8G2FontRender_Print+0x14>
		}
	}
}
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <font_get_unsigned_bits>:

uint8_t font_get_unsigned_bits(U8G2FontGlyph_t *glyph, uint8_t count) {
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t start = glyph->bit_pos;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	79db      	ldrb	r3, [r3, #7]
 8000948:	737b      	strb	r3, [r7, #13]
  uint8_t end = start + count;
 800094a:	7b7a      	ldrb	r2, [r7, #13]
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	4413      	add	r3, r2
 8000950:	73bb      	strb	r3, [r7, #14]

  val = pgm_read(glyph->data);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	73fb      	strb	r3, [r7, #15]
  val >>= start;
 800095a:	7bfa      	ldrb	r2, [r7, #15]
 800095c:	7b7b      	ldrb	r3, [r7, #13]
 800095e:	fa42 f303 	asr.w	r3, r2, r3
 8000962:	73fb      	strb	r3, [r7, #15]

  if (end >= 8) {
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d918      	bls.n	800099c <font_get_unsigned_bits+0x64>
    uint8_t cnt = 8 - start;
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	f1c3 0308 	rsb	r3, r3, #8
 8000970:	733b      	strb	r3, [r7, #12]
    glyph->data++;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	609a      	str	r2, [r3, #8]

    val |= pgm_read(glyph->data) << (cnt);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	b25a      	sxtb	r2, r3
 800098c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000990:	4313      	orrs	r3, r2
 8000992:	b25b      	sxtb	r3, r3
 8000994:	73fb      	strb	r3, [r7, #15]

    end -= 8;
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	3b08      	subs	r3, #8
 800099a:	73bb      	strb	r3, [r7, #14]
  }

  glyph->bit_pos = end;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7bba      	ldrb	r2, [r7, #14]
 80009a0:	71da      	strb	r2, [r3, #7]

  val &= (1U << count) - 1;
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4013      	ands	r3, r2
 80009b6:	73fb      	strb	r3, [r7, #15]

  return val;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <font_get_signed_bits>:

int8_t font_get_signed_bits(U8G2FontGlyph_t *glyph, uint8_t count) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  int8_t val = (int8_t)font_get_unsigned_bits(glyph, count);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	4619      	mov	r1, r3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffaf 	bl	8000938 <font_get_unsigned_bits>
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
  val -= 1 << (count - 1);
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	73fb      	strb	r3, [r7, #15]

  return val;
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <font_get_start_symbol_search_postition>:

uint16_t font_get_start_symbol_search_postition(U8G2FontRender_t *font, char chr) {
 80009fe:	b480      	push	{r7}
 8000a00:	b085      	sub	sp, #20
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	70fb      	strb	r3, [r7, #3]
	uint16_t search_position = U8G2_FONT_HEADER_SIZE;
 8000a0a:	2317      	movs	r3, #23
 8000a0c:	81fb      	strh	r3, [r7, #14]
	if (chr >= 65 && chr <= 90) {
 8000a0e:	78fb      	ldrb	r3, [r7, #3]
 8000a10:	2b40      	cmp	r3, #64	; 0x40
 8000a12:	d906      	bls.n	8000a22 <font_get_start_symbol_search_postition+0x24>
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	2b5a      	cmp	r3, #90	; 0x5a
 8000a18:	d803      	bhi.n	8000a22 <font_get_start_symbol_search_postition+0x24>
		search_position = font->header.offset_A;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	8a5b      	ldrh	r3, [r3, #18]
 8000a1e:	81fb      	strh	r3, [r7, #14]
 8000a20:	e008      	b.n	8000a34 <font_get_start_symbol_search_postition+0x36>
	} else if (chr >= 97 && chr <= 122) {
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	2b60      	cmp	r3, #96	; 0x60
 8000a26:	d905      	bls.n	8000a34 <font_get_start_symbol_search_postition+0x36>
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	2b7a      	cmp	r3, #122	; 0x7a
 8000a2c:	d802      	bhi.n	8000a34 <font_get_start_symbol_search_postition+0x36>
		search_position = font->header.offset_a;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8a9b      	ldrh	r3, [r3, #20]
 8000a32:	81fb      	strh	r3, [r7, #14]
	}

	return search_position;
 8000a34:	89fb      	ldrh	r3, [r7, #14]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <font_get_glyph>:

int8_t font_get_glyph(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph, uint16_t search_position, char chr) {
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	460b      	mov	r3, r1
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	4613      	mov	r3, r2
 8000a54:	717b      	strb	r3, [r7, #5]
	while (1) {
		memcpy(glyph, font->data + search_position, 2);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	699a      	ldr	r2, [r3, #24]
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	801a      	strh	r2, [r3, #0]
		if (glyph->character == chr) {
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	797a      	ldrb	r2, [r7, #5]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d10b      	bne.n	8000a88 <font_get_glyph+0x48>
			glyph->data = font->data + search_position + 2;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	699a      	ldr	r2, [r3, #24]
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	3302      	adds	r3, #2
 8000a78:	441a      	add	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	609a      	str	r2, [r3, #8]
			glyph->bit_pos = 0;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2200      	movs	r2, #0
 8000a82:	71da      	strb	r2, [r3, #7]

			return U8G2FontRender_OK;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e00c      	b.n	8000aa2 <font_get_glyph+0x62>
		}

		search_position += glyph->next_glypth;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	4413      	add	r3, r2
 8000a92:	80fb      	strh	r3, [r7, #6]
		if (glyph->next_glypth == 0) {
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d000      	beq.n	8000a9e <font_get_glyph+0x5e>
		memcpy(glyph, font->data + search_position, 2);
 8000a9c:	e7db      	b.n	8000a56 <font_get_glyph+0x16>
			break;
 8000a9e:	bf00      	nop
		}
	}

	return U8G2FontRender_ERR;
 8000aa0:	2302      	movs	r3, #2
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <font_parse_glyph_header>:

void font_parse_glyph_header(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	glyph->width = font_get_unsigned_bits(glyph, font->header.glyph_width);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	4619      	mov	r1, r3
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	f7ff ff3b 	bl	8000938 <font_get_unsigned_bits>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	709a      	strb	r2, [r3, #2]
	glyph->height = font_get_unsigned_bits(glyph, font->header.glyph_height);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	795b      	ldrb	r3, [r3, #5]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6838      	ldr	r0, [r7, #0]
 8000ad2:	f7ff ff31 	bl	8000938 <font_get_unsigned_bits>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	70da      	strb	r2, [r3, #3]
	glyph->x_offset = font_get_signed_bits(glyph, font->header.glyph_x_offset);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	799b      	ldrb	r3, [r3, #6]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6838      	ldr	r0, [r7, #0]
 8000ae6:	f7ff ff6d 	bl	80009c4 <font_get_signed_bits>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	711a      	strb	r2, [r3, #4]
	glyph->y_offset = font_get_signed_bits(glyph, font->header.glyph_y_offset);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	79db      	ldrb	r3, [r3, #7]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6838      	ldr	r0, [r7, #0]
 8000afa:	f7ff ff63 	bl	80009c4 <font_get_signed_bits>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	715a      	strb	r2, [r3, #5]
	glyph->pitch = font_get_signed_bits(glyph, font->header.glyph_pitch);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a1b      	ldrb	r3, [r3, #8]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	6838      	ldr	r0, [r7, #0]
 8000b0e:	f7ff ff59 	bl	80009c4 <font_get_signed_bits>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	719a      	strb	r2, [r3, #6]
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <font_draw_start_x_position>:

uint8_t font_draw_start_x_position(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph) {
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
	return glyph->x_offset;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000b32:	b2db      	uxtb	r3, r3
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <font_draw_start_y_position>:

uint8_t font_draw_start_y_position(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph) {
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
	return font->header.bounding_box_height - glyph->height - glyph->y_offset;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	78db      	ldrb	r3, [r3, #3]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	b2db      	uxtb	r3, r3
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <font_render_glyph>:

void font_render_glyph(U8G2FontRender_t *font, U8G2FontGlyph_t *glyph, uint8_t x, uint8_t y) {
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b088      	sub	sp, #32
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	71fb      	strb	r3, [r7, #7]
 8000b80:	4613      	mov	r3, r2
 8000b82:	71bb      	strb	r3, [r7, #6]
	uint32_t pixels = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
	uint8_t y_pos = y + font_draw_start_y_position(font, glyph);
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ffd7 	bl	8000b3e <font_draw_start_y_position>
 8000b90:	4603      	mov	r3, r0
 8000b92:	461a      	mov	r2, r3
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	4413      	add	r3, r2
 8000b98:	76fb      	strb	r3, [r7, #27]
	uint8_t x_pos = x + font_draw_start_x_position(font, glyph);
 8000b9a:	68b9      	ldr	r1, [r7, #8]
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffc0 	bl	8000b22 <font_draw_start_x_position>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4413      	add	r3, r2
 8000baa:	76bb      	strb	r3, [r7, #26]
	while (1) {
		uint8_t zeros = font_get_unsigned_bits(glyph, font->header.zero_bit_width);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	789b      	ldrb	r3, [r3, #2]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	68b8      	ldr	r0, [r7, #8]
 8000bb4:	f7ff fec0 	bl	8000938 <font_get_unsigned_bits>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	75fb      	strb	r3, [r7, #23]
		uint8_t ones = font_get_unsigned_bits(glyph, font->header.one_bit_width);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	78db      	ldrb	r3, [r3, #3]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68b8      	ldr	r0, [r7, #8]
 8000bc4:	f7ff feb8 	bl	8000938 <font_get_unsigned_bits>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75bb      	strb	r3, [r7, #22]
		int8_t repeat = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	767b      	strb	r3, [r7, #25]

		while (font_get_unsigned_bits(glyph, 1) == 1) {
 8000bd0:	e005      	b.n	8000bde <font_render_glyph+0x70>
			repeat++;
 8000bd2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	767b      	strb	r3, [r7, #25]
		while (font_get_unsigned_bits(glyph, 1) == 1) {
 8000bde:	2101      	movs	r1, #1
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f7ff fea9 	bl	8000938 <font_get_unsigned_bits>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d0f2      	beq.n	8000bd2 <font_render_glyph+0x64>
		}

		for (; repeat>=0; repeat--) {
 8000bec:	e040      	b.n	8000c70 <font_render_glyph+0x102>
			for (uint8_t i=0; i<zeros + ones; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	763b      	strb	r3, [r7, #24]
 8000bf2:	e031      	b.n	8000c58 <font_render_glyph+0xea>
				if (i <= zeros - 1) {
 8000bf4:	7e3a      	ldrb	r2, [r7, #24]
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dc06      	bgt.n	8000c0c <font_render_glyph+0x9e>
					font->drawBgPixel(x_pos, y_pos);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	7ef9      	ldrb	r1, [r7, #27]
 8000c04:	7eba      	ldrb	r2, [r7, #26]
 8000c06:	4610      	mov	r0, r2
 8000c08:	4798      	blx	r3
 8000c0a:	e005      	b.n	8000c18 <font_render_glyph+0xaa>
				} else {
					font->drawFgPixel(x_pos, y_pos);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	7ef9      	ldrb	r1, [r7, #27]
 8000c12:	7eba      	ldrb	r2, [r7, #26]
 8000c14:	4610      	mov	r0, r2
 8000c16:	4798      	blx	r3
				}
				x_pos++;
 8000c18:	7ebb      	ldrb	r3, [r7, #26]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	76bb      	strb	r3, [r7, #26]

				pixels++;
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61fb      	str	r3, [r7, #28]
				if (pixels % glyph->width == 0) {
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c30:	fb02 f201 	mul.w	r2, r2, r1
 8000c34:	1a9b      	subs	r3, r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10b      	bne.n	8000c52 <font_render_glyph+0xe4>
					y_pos++;
 8000c3a:	7efb      	ldrb	r3, [r7, #27]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	76fb      	strb	r3, [r7, #27]
					x_pos = x + font_draw_start_x_position(font, glyph);
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff ff6d 	bl	8000b22 <font_draw_start_x_position>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4413      	add	r3, r2
 8000c50:	76bb      	strb	r3, [r7, #26]
			for (uint8_t i=0; i<zeros + ones; i++) {
 8000c52:	7e3b      	ldrb	r3, [r7, #24]
 8000c54:	3301      	adds	r3, #1
 8000c56:	763b      	strb	r3, [r7, #24]
 8000c58:	7e3a      	ldrb	r2, [r7, #24]
 8000c5a:	7df9      	ldrb	r1, [r7, #23]
 8000c5c:	7dbb      	ldrb	r3, [r7, #22]
 8000c5e:	440b      	add	r3, r1
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbc7      	blt.n	8000bf4 <font_render_glyph+0x86>
		for (; repeat>=0; repeat--) {
 8000c64:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	767b      	strb	r3, [r7, #25]
 8000c70:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	daba      	bge.n	8000bee <font_render_glyph+0x80>
				}
			}
		}

		if (pixels >= glyph->width * glyph->height) {
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	fb03 f302 	mul.w	r3, r3, r2
 8000c86:	461a      	mov	r2, r3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d200      	bcs.n	8000c90 <font_render_glyph+0x122>
	while (1) {
 8000c8e:	e78d      	b.n	8000bac <font_render_glyph+0x3e>
			break;
 8000c90:	bf00      	nop
		}
	}
}
 8000c92:	bf00      	nop
 8000c94:	3720      	adds	r7, #32
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ca8:	480a      	ldr	r0, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cc2:	f7ff fd59 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f001 fc29 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff fb6b 	bl	80003a4 <main>
  bx lr
 8000cce:	4770      	bx	lr
  ldr r3, =_sidata
 8000cd0:	0800302c 	.word	0x0800302c
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cd8:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8000cdc:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8000ce0:	2000011c 	.word	0x2000011c

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x28>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f907 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fc68 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f911 	bl	8000f5a <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f000 f8e7 	bl	8000f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	20000024 	.word	0x20000024
 8000d70:	20000020 	.word	0x20000020

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <HAL_IncTick+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000024 	.word	0x20000024
 8000d94:	20000114 	.word	0x20000114

08000d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	; (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000114 	.word	0x20000114

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed8:	d301      	bcc.n	8000ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <SysTick_Config+0x40>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f7ff ff90 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <SysTick_Config+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <SysTick_Config+0x40>)
 8000ef8:	2207      	movs	r2, #7
 8000efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	e000e010 	.word	0xe000e010

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff49 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff5e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff90 	bl	8000e64 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5f 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffb0 	bl	8000ec8 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b08b      	sub	sp, #44	; 0x2c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e127      	b.n	80011d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8116 	bne.w	80011d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b12      	cmp	r3, #18
 8000fac:	d034      	beq.n	8001018 <HAL_GPIO_Init+0xa4>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d80d      	bhi.n	8000fce <HAL_GPIO_Init+0x5a>
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x9a>
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d804      	bhi.n	8000fc4 <HAL_GPIO_Init+0x50>
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d031      	beq.n	8001022 <HAL_GPIO_Init+0xae>
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d01c      	beq.n	8000ffc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e048      	b.n	8001056 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d043      	beq.n	8001050 <HAL_GPIO_Init+0xdc>
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	d01b      	beq.n	8001004 <HAL_GPIO_Init+0x90>
          break;
 8000fcc:	e043      	b.n	8001056 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fce:	4a89      	ldr	r2, [pc, #548]	; (80011f4 <HAL_GPIO_Init+0x280>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d026      	beq.n	8001022 <HAL_GPIO_Init+0xae>
 8000fd4:	4a87      	ldr	r2, [pc, #540]	; (80011f4 <HAL_GPIO_Init+0x280>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d806      	bhi.n	8000fe8 <HAL_GPIO_Init+0x74>
 8000fda:	4a87      	ldr	r2, [pc, #540]	; (80011f8 <HAL_GPIO_Init+0x284>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d020      	beq.n	8001022 <HAL_GPIO_Init+0xae>
 8000fe0:	4a86      	ldr	r2, [pc, #536]	; (80011fc <HAL_GPIO_Init+0x288>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d01d      	beq.n	8001022 <HAL_GPIO_Init+0xae>
          break;
 8000fe6:	e036      	b.n	8001056 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe8:	4a85      	ldr	r2, [pc, #532]	; (8001200 <HAL_GPIO_Init+0x28c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d019      	beq.n	8001022 <HAL_GPIO_Init+0xae>
 8000fee:	4a85      	ldr	r2, [pc, #532]	; (8001204 <HAL_GPIO_Init+0x290>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d016      	beq.n	8001022 <HAL_GPIO_Init+0xae>
 8000ff4:	4a84      	ldr	r2, [pc, #528]	; (8001208 <HAL_GPIO_Init+0x294>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d013      	beq.n	8001022 <HAL_GPIO_Init+0xae>
          break;
 8000ffa:	e02c      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	623b      	str	r3, [r7, #32]
          break;
 8001002:	e028      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	3304      	adds	r3, #4
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e023      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	3308      	adds	r3, #8
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e01e      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	330c      	adds	r3, #12
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e019      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102a:	2304      	movs	r3, #4
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e012      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001038:	2308      	movs	r3, #8
 800103a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	611a      	str	r2, [r3, #16]
          break;
 8001042:	e008      	b.n	8001056 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001044:	2308      	movs	r3, #8
 8001046:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	615a      	str	r2, [r3, #20]
          break;
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	2bff      	cmp	r3, #255	; 0xff
 800105a:	d801      	bhi.n	8001060 <HAL_GPIO_Init+0xec>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	e001      	b.n	8001064 <HAL_GPIO_Init+0xf0>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2bff      	cmp	r3, #255	; 0xff
 800106a:	d802      	bhi.n	8001072 <HAL_GPIO_Init+0xfe>
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x104>
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	3b08      	subs	r3, #8
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	210f      	movs	r1, #15
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	401a      	ands	r2, r3
 800108a:	6a39      	ldr	r1, [r7, #32]
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	431a      	orrs	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8096 	beq.w	80011d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a6:	4b59      	ldr	r3, [pc, #356]	; (800120c <HAL_GPIO_Init+0x298>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_GPIO_Init+0x298>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b56      	ldr	r3, [pc, #344]	; (800120c <HAL_GPIO_Init+0x298>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010be:	4a54      	ldr	r2, [pc, #336]	; (8001210 <HAL_GPIO_Init+0x29c>)
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4013      	ands	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <HAL_GPIO_Init+0x2a0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x19e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <HAL_GPIO_Init+0x2a4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x19a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_GPIO_Init+0x2a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x196>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x192>
 8001102:	2303      	movs	r3, #3
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x1a0>
 8001106:	2304      	movs	r3, #4
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x1a0>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x1a0>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x1a0>
 8001112:	2300      	movs	r3, #0
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001124:	493a      	ldr	r1, [pc, #232]	; (8001210 <HAL_GPIO_Init+0x29c>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800113e:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4938      	ldr	r1, [pc, #224]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800114c:	4b35      	ldr	r3, [pc, #212]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	43db      	mvns	r3, r3
 8001154:	4933      	ldr	r1, [pc, #204]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001156:	4013      	ands	r3, r2
 8001158:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	492e      	ldr	r1, [pc, #184]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	43db      	mvns	r3, r3
 800117c:	4929      	ldr	r1, [pc, #164]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 800117e:	4013      	ands	r3, r2
 8001180:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	4924      	ldr	r1, [pc, #144]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	491f      	ldr	r1, [pc, #124]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	491a      	ldr	r1, [pc, #104]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60cb      	str	r3, [r1, #12]
 80011c2:	e006      	b.n	80011d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4915      	ldr	r1, [pc, #84]	; (8001224 <HAL_GPIO_Init+0x2b0>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f aed0 	bne.w	8000f88 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	372c      	adds	r7, #44	; 0x2c
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10110000 	.word	0x10110000
 80011fc:	10120000 	.word	0x10120000
 8001200:	10310000 	.word	0x10310000
 8001204:	10320000 	.word	0x10320000
 8001208:	10220000 	.word	0x10220000
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011000 	.word	0x40011000
 8001220:	40011400 	.word	0x40011400
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e11f      	b.n	800147a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d106      	bne.n	8001254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f9f4 	bl	800063c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2224      	movs	r2, #36	; 0x24
 8001258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800127a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800128c:	f001 f90e 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8001290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a7b      	ldr	r2, [pc, #492]	; (8001484 <HAL_I2C_Init+0x25c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d807      	bhi.n	80012ac <HAL_I2C_Init+0x84>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <HAL_I2C_Init+0x260>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e006      	b.n	80012ba <HAL_I2C_Init+0x92>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a77      	ldr	r2, [pc, #476]	; (800148c <HAL_I2C_Init+0x264>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	bf94      	ite	ls
 80012b4:	2301      	movls	r3, #1
 80012b6:	2300      	movhi	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0db      	b.n	800147a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4a72      	ldr	r2, [pc, #456]	; (8001490 <HAL_I2C_Init+0x268>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0c9b      	lsrs	r3, r3, #18
 80012cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	430a      	orrs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a64      	ldr	r2, [pc, #400]	; (8001484 <HAL_I2C_Init+0x25c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d802      	bhi.n	80012fc <HAL_I2C_Init+0xd4>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	e009      	b.n	8001310 <HAL_I2C_Init+0xe8>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	4a63      	ldr	r2, [pc, #396]	; (8001494 <HAL_I2C_Init+0x26c>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	3301      	adds	r3, #1
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	430b      	orrs	r3, r1
 8001316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001322:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4956      	ldr	r1, [pc, #344]	; (8001484 <HAL_I2C_Init+0x25c>)
 800132c:	428b      	cmp	r3, r1
 800132e:	d80d      	bhi.n	800134c <HAL_I2C_Init+0x124>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e59      	subs	r1, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fbb1 f3f3 	udiv	r3, r1, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	2b04      	cmp	r3, #4
 8001346:	bf38      	it	cc
 8001348:	2304      	movcc	r3, #4
 800134a:	e04f      	b.n	80013ec <HAL_I2C_Init+0x1c4>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_I2C_Init+0x150>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1e58      	subs	r0, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	440b      	add	r3, r1
 8001362:	fbb0 f3f3 	udiv	r3, r0, r3
 8001366:	3301      	adds	r3, #1
 8001368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	e012      	b.n	800139e <HAL_I2C_Init+0x176>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1e58      	subs	r0, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	0099      	lsls	r1, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	fbb0 f3f3 	udiv	r3, r0, r3
 800138e:	3301      	adds	r3, #1
 8001390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_I2C_Init+0x17e>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e022      	b.n	80013ec <HAL_I2C_Init+0x1c4>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10e      	bne.n	80013cc <HAL_I2C_Init+0x1a4>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1e58      	subs	r0, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	440b      	add	r3, r1
 80013bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ca:	e00f      	b.n	80013ec <HAL_I2C_Init+0x1c4>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	0099      	lsls	r1, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	6809      	ldr	r1, [r1, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69da      	ldr	r2, [r3, #28]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800141a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6911      	ldr	r1, [r2, #16]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68d2      	ldr	r2, [r2, #12]
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	000186a0 	.word	0x000186a0
 8001488:	001e847f 	.word	0x001e847f
 800148c:	003d08ff 	.word	0x003d08ff
 8001490:	431bde83 	.word	0x431bde83
 8001494:	10624dd3 	.word	0x10624dd3

08001498 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	4613      	mov	r3, r2
 80014aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fc74 	bl	8000d98 <HAL_GetTick>
 80014b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	f040 80e0 	bne.w	8001680 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2319      	movs	r3, #25
 80014c6:	2201      	movs	r2, #1
 80014c8:	4970      	ldr	r1, [pc, #448]	; (800168c <HAL_I2C_Master_Transmit+0x1f4>)
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 fa92 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0d3      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x50>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0cc      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d007      	beq.n	800150e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0201 	orr.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2221      	movs	r2, #33	; 0x21
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2210      	movs	r2, #16
 800152a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	893a      	ldrh	r2, [r7, #8]
 800153e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_I2C_Master_Transmit+0x1f8>)
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001550:	8979      	ldrh	r1, [r7, #10]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f9ca 	bl	80018f0 <I2C_MasterRequestWrite>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08d      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800157c:	e066      	b.n	800164c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 fb0c 	bl	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00d      	beq.n	80015aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b04      	cmp	r3, #4
 8001594:	d107      	bne.n	80015a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11b      	bne.n	8001620 <HAL_I2C_Master_Transmit+0x188>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d017      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	6a39      	ldr	r1, [r7, #32]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 fafc 	bl	8001c22 <I2C_WaitOnBTFFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00d      	beq.n	800164c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2b04      	cmp	r3, #4
 8001636:	d107      	bne.n	8001648 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001646:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e01a      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d194      	bne.n	800157e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	00100002 	.word	0x00100002
 8001690:	ffff0000 	.word	0xffff0000

08001694 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af02      	add	r7, sp, #8
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	460b      	mov	r3, r1
 80016a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff fb78 	bl	8000d98 <HAL_GetTick>
 80016a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b20      	cmp	r3, #32
 80016b8:	f040 8111 	bne.w	80018de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2319      	movs	r3, #25
 80016c2:	2201      	movs	r2, #1
 80016c4:	4988      	ldr	r1, [pc, #544]	; (80018e8 <HAL_I2C_IsDeviceReady+0x254>)
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 f994 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
 80016d4:	e104      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_I2C_IsDeviceReady+0x50>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0fd      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d007      	beq.n	800170a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2224      	movs	r2, #36	; 0x24
 800171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a70      	ldr	r2, [pc, #448]	; (80018ec <HAL_I2C_IsDeviceReady+0x258>)
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800173c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f952 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00d      	beq.n	8001772 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001764:	d103      	bne.n	800176e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0b6      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001772:	897b      	ldrh	r3, [r7, #10]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001780:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001782:	f7ff fb09 	bl	8000d98 <HAL_GetTick>
 8001786:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017b6:	e025      	b.n	8001804 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017b8:	f7ff faee 	bl	8000d98 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d302      	bcc.n	80017ce <HAL_I2C_IsDeviceReady+0x13a>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d103      	bne.n	80017d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22a0      	movs	r2, #160	; 0xa0
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2ba0      	cmp	r3, #160	; 0xa0
 800180e:	d005      	beq.n	800181c <HAL_I2C_IsDeviceReady+0x188>
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_I2C_IsDeviceReady+0x188>
 8001816:	7dbb      	ldrb	r3, [r7, #22]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0cd      	beq.n	80017b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d129      	bne.n	8001886 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001840:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2319      	movs	r3, #25
 800185e:	2201      	movs	r2, #1
 8001860:	4921      	ldr	r1, [pc, #132]	; (80018e8 <HAL_I2C_IsDeviceReady+0x254>)
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f8c6 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e036      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e02c      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001894:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800189e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2319      	movs	r3, #25
 80018a6:	2201      	movs	r2, #1
 80018a8:	490f      	ldr	r1, [pc, #60]	; (80018e8 <HAL_I2C_IsDeviceReady+0x254>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f8a2 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e012      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3301      	adds	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f4ff af32 	bcc.w	800172e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018de:	2302      	movs	r3, #2
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	00100002 	.word	0x00100002
 80018ec:	ffff0000 	.word	0xffff0000

080018f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	460b      	mov	r3, r1
 80018fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d006      	beq.n	800191a <I2C_MasterRequestWrite+0x2a>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d003      	beq.n	800191a <I2C_MasterRequestWrite+0x2a>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00b      	b.n	8001944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	2b12      	cmp	r3, #18
 8001932:	d107      	bne.n	8001944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f84f 	bl	80019f4 <I2C_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196a:	d103      	bne.n	8001974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e035      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001980:	d108      	bne.n	8001994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e01b      	b.n	80019cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	11db      	asrs	r3, r3, #7
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0306 	and.w	r3, r3, #6
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f063 030f 	orn	r3, r3, #15
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <I2C_MasterRequestWrite+0xfc>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f875 	bl	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e010      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <I2C_MasterRequestWrite+0x100>)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f865 	bl	8001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	00010008 	.word	0x00010008
 80019f0:	00010002 	.word	0x00010002

080019f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a04:	e025      	b.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a0c:	d021      	beq.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0e:	f7ff f9c3 	bl	8000d98 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d302      	bcc.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d116      	bne.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f043 0220 	orr.w	r2, r3, #32
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e023      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10d      	bne.n	8001a78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4013      	ands	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf0c      	ite	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	2300      	movne	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	e00c      	b.n	8001a92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4013      	ands	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d0b6      	beq.n	8001a06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab0:	e051      	b.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d123      	bne.n	8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e046      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b10:	d021      	beq.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff f941 	bl	8000d98 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d116      	bne.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0220 	orr.w	r2, r3, #32
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e020      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d10c      	bne.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	e00b      	b.n	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	43da      	mvns	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	4013      	ands	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	2300      	moveq	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d18d      	bne.n	8001ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bac:	e02d      	b.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f878 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e02d      	b.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc4:	d021      	beq.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f8e7 	bl	8000d98 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d116      	bne.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2220      	movs	r2, #32
 8001be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e007      	b.n	8001c1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d1ca      	bne.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c2e:	e02d      	b.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f837 	bl	8001ca4 <I2C_IsAcknowledgeFailed>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e02d      	b.n	8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c46:	d021      	beq.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7ff f8a6 	bl	8000d98 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d302      	bcc.n	8001c5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d1ca      	bne.n	8001c30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cba:	d11b      	bne.n	8001cf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e26c      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8087 	beq.w	8001e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d20:	4b92      	ldr	r3, [pc, #584]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d00c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d2c:	4b8f      	ldr	r3, [pc, #572]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d112      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5e>
 8001d38:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d10b      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d46:	4b89      	ldr	r3, [pc, #548]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x12c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d168      	bne.n	8001e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e246      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x76>
 8001d68:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a7f      	ldr	r2, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e02e      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a77      	ldr	r2, [pc, #476]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0xbc>
 8001da2:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a71      	ldr	r2, [pc, #452]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001dbc:	4b6b      	ldr	r3, [pc, #428]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6a      	ldr	r2, [pc, #424]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe ffdc 	bl	8000d98 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7fe ffd8 	bl	8000d98 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1fa      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe4>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7fe ffc8 	bl	8000d98 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe ffc4 	bl	8000d98 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1e6      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x10c>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e46:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x18c>
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x176>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1ba      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4939      	ldr	r1, [pc, #228]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe ff7d 	bl	8000d98 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7fe ff79 	bl	8000d98 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e19b      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4927      	ldr	r1, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe ff5c 	bl	8000d98 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7fe ff58 	bl	8000d98 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e17a      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03a      	beq.n	8001f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d019      	beq.n	8001f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7fe ff3c 	bl	8000d98 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7fe ff38 	bl	8000d98 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e15a      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fac6 	bl	80024d4 <RCC_Delay>
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7fe ff22 	bl	8000d98 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7fe ff1e 	bl	8000d98 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d908      	bls.n	8001f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e140      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	42420000 	.word	0x42420000
 8001f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b9e      	ldr	r3, [pc, #632]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e9      	bne.n	8001f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a6 	beq.w	80020de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b97      	ldr	r3, [pc, #604]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10d      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b94      	ldr	r3, [pc, #592]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a93      	ldr	r2, [pc, #588]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b91      	ldr	r3, [pc, #580]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b8e      	ldr	r3, [pc, #568]	; (80021f8 <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a8a      	ldr	r2, [pc, #552]	; (80021f8 <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fedf 	bl	8000d98 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7fe fedb 	bl	8000d98 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	; 0x64
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0fd      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x4f8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x312>
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e02d      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x334>
 800201a:	4b76      	ldr	r3, [pc, #472]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a75      	ldr	r2, [pc, #468]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a72      	ldr	r2, [pc, #456]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	e01c      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b05      	cmp	r3, #5
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x356>
 800203c:	4b6d      	ldr	r3, [pc, #436]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a6c      	ldr	r2, [pc, #432]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a69      	ldr	r2, [pc, #420]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e00b      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002056:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a66      	ldr	r2, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a63      	ldr	r2, [pc, #396]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d015      	beq.n	80020a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7fe fe8f 	bl	8000d98 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe fe8b 	bl	8000d98 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0ab      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ee      	beq.n	800207e <HAL_RCC_OscConfig+0x37e>
 80020a0:	e014      	b.n	80020cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fe79 	bl	8000d98 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe fe75 	bl	8000d98 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e095      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ee      	bne.n	80020aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b48      	ldr	r3, [pc, #288]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a47      	ldr	r2, [pc, #284]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8081 	beq.w	80021ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e8:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d061      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d146      	bne.n	800218a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fc:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x4fc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fe49 	bl	8000d98 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7fe fe45 	bl	8000d98 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e067      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d108      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002132:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	492d      	ldr	r1, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a19      	ldr	r1, [r3, #32]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	430b      	orrs	r3, r1
 8002156:	4927      	ldr	r1, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_OscConfig+0x4fc>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe fe19 	bl	8000d98 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fe15 	bl	8000d98 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e037      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x46a>
 8002188:	e02f      	b.n	80021ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_RCC_OscConfig+0x4fc>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fe02 	bl	8000d98 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe fdfe 	bl	8000d98 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e020      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x498>
 80021b6:	e018      	b.n	80021ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e013      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
 80021fc:	42420060 	.word	0x42420060

08002200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0d0      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b67      	ldr	r3, [pc, #412]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0207 	bic.w	r2, r3, #7
 800222a:	4965      	ldr	r1, [pc, #404]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b8      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a52      	ldr	r2, [pc, #328]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800227e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	494d      	ldr	r1, [pc, #308]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d040      	beq.n	8002320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e073      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3d      	ldr	r3, [pc, #244]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06b      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4936      	ldr	r1, [pc, #216]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7fe fd52 	bl	8000d98 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7fe fd4e 	bl	8000d98 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e053      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d210      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0207 	bic.w	r2, r3, #7
 8002336:	4922      	ldr	r1, [pc, #136]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e032      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4916      	ldr	r1, [pc, #88]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238e:	f000 f821 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a0:	5cd3      	ldrb	r3, [r2, r3]
 80023a2:	fa21 f303 	lsr.w	r3, r1, r3
 80023a6:	4a09      	ldr	r2, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1cc>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1d0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fcb0 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	0800300c 	.word	0x0800300c
 80023cc:	2000001c 	.word	0x2000001c
 80023d0:	20000020 	.word	0x20000020

080023d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	b490      	push	{r4, r7}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_GetSysClockFreq+0xb0>)
 80023dc:	1d3c      	adds	r4, r7, #4
 80023de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d002      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x40>
 800240e:	2b08      	cmp	r3, #8
 8002410:	d003      	beq.n	800241a <HAL_RCC_GetSysClockFreq+0x46>
 8002412:	e02d      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002414:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002416:	623b      	str	r3, [r7, #32]
      break;
 8002418:	e02d      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002426:	4413      	add	r3, r2
 8002428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800242c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_RCC_GetSysClockFreq+0xb8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c5b      	lsrs	r3, r3, #17
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002446:	4413      	add	r3, r2
 8002448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800244c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002452:	fb02 f203 	mul.w	r2, r2, r3
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	e004      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	623b      	str	r3, [r7, #32]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6a3b      	ldr	r3, [r7, #32]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	080026ec 	.word	0x080026ec
 8002488:	080026fc 	.word	0x080026fc
 800248c:	40021000 	.word	0x40021000
 8002490:	007a1200 	.word	0x007a1200
 8002494:	003d0900 	.word	0x003d0900

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	2000001c 	.word	0x2000001c

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff2 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b4:	4601      	mov	r1, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	0800301c 	.word	0x0800301c

080024d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <RCC_Delay+0x34>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0a      	ldr	r2, [pc, #40]	; (800250c <RCC_Delay+0x38>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0a5b      	lsrs	r3, r3, #9
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024f0:	bf00      	nop
  }
  while (Delay --);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e5a      	subs	r2, r3, #1
 80024f6:	60fa      	str	r2, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f9      	bne.n	80024f0 <RCC_Delay+0x1c>
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	2000001c 	.word	0x2000001c
 800250c:	10624dd3 	.word	0x10624dd3

08002510 <__errno>:
 8002510:	4b01      	ldr	r3, [pc, #4]	; (8002518 <__errno+0x8>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000028 	.word	0x20000028

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	2500      	movs	r5, #0
 8002520:	4e0c      	ldr	r6, [pc, #48]	; (8002554 <__libc_init_array+0x38>)
 8002522:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002524:	1ba4      	subs	r4, r4, r6
 8002526:	10a4      	asrs	r4, r4, #2
 8002528:	42a5      	cmp	r5, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	f000 f8a2 	bl	8002674 <_init>
 8002530:	2500      	movs	r5, #0
 8002532:	4e0a      	ldr	r6, [pc, #40]	; (800255c <__libc_init_array+0x40>)
 8002534:	4c0a      	ldr	r4, [pc, #40]	; (8002560 <__libc_init_array+0x44>)
 8002536:	1ba4      	subs	r4, r4, r6
 8002538:	10a4      	asrs	r4, r4, #2
 800253a:	42a5      	cmp	r5, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002544:	4798      	blx	r3
 8002546:	3501      	adds	r5, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800254e:	4798      	blx	r3
 8002550:	3501      	adds	r5, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	08003024 	.word	0x08003024
 8002558:	08003024 	.word	0x08003024
 800255c:	08003024 	.word	0x08003024
 8002560:	08003028 	.word	0x08003028

08002564 <malloc>:
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <malloc+0xc>)
 8002566:	4601      	mov	r1, r0
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	f000 b817 	b.w	800259c <_malloc_r>
 800256e:	bf00      	nop
 8002570:	20000028 	.word	0x20000028

08002574 <memcpy>:
 8002574:	b510      	push	{r4, lr}
 8002576:	1e43      	subs	r3, r0, #1
 8002578:	440a      	add	r2, r1
 800257a:	4291      	cmp	r1, r2
 800257c:	d100      	bne.n	8002580 <memcpy+0xc>
 800257e:	bd10      	pop	{r4, pc}
 8002580:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002588:	e7f7      	b.n	800257a <memcpy+0x6>

0800258a <memset>:
 800258a:	4603      	mov	r3, r0
 800258c:	4402      	add	r2, r0
 800258e:	4293      	cmp	r3, r2
 8002590:	d100      	bne.n	8002594 <memset+0xa>
 8002592:	4770      	bx	lr
 8002594:	f803 1b01 	strb.w	r1, [r3], #1
 8002598:	e7f9      	b.n	800258e <memset+0x4>
	...

0800259c <_malloc_r>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	1ccd      	adds	r5, r1, #3
 80025a0:	f025 0503 	bic.w	r5, r5, #3
 80025a4:	3508      	adds	r5, #8
 80025a6:	2d0c      	cmp	r5, #12
 80025a8:	bf38      	it	cc
 80025aa:	250c      	movcc	r5, #12
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	4606      	mov	r6, r0
 80025b0:	db01      	blt.n	80025b6 <_malloc_r+0x1a>
 80025b2:	42a9      	cmp	r1, r5
 80025b4:	d903      	bls.n	80025be <_malloc_r+0x22>
 80025b6:	230c      	movs	r3, #12
 80025b8:	6033      	str	r3, [r6, #0]
 80025ba:	2000      	movs	r0, #0
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
 80025be:	f000 f857 	bl	8002670 <__malloc_lock>
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <_malloc_r+0xac>)
 80025c4:	6814      	ldr	r4, [r2, #0]
 80025c6:	4621      	mov	r1, r4
 80025c8:	b991      	cbnz	r1, 80025f0 <_malloc_r+0x54>
 80025ca:	4c20      	ldr	r4, [pc, #128]	; (800264c <_malloc_r+0xb0>)
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	b91b      	cbnz	r3, 80025d8 <_malloc_r+0x3c>
 80025d0:	4630      	mov	r0, r6
 80025d2:	f000 f83d 	bl	8002650 <_sbrk_r>
 80025d6:	6020      	str	r0, [r4, #0]
 80025d8:	4629      	mov	r1, r5
 80025da:	4630      	mov	r0, r6
 80025dc:	f000 f838 	bl	8002650 <_sbrk_r>
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d124      	bne.n	800262e <_malloc_r+0x92>
 80025e4:	230c      	movs	r3, #12
 80025e6:	4630      	mov	r0, r6
 80025e8:	6033      	str	r3, [r6, #0]
 80025ea:	f000 f842 	bl	8002672 <__malloc_unlock>
 80025ee:	e7e4      	b.n	80025ba <_malloc_r+0x1e>
 80025f0:	680b      	ldr	r3, [r1, #0]
 80025f2:	1b5b      	subs	r3, r3, r5
 80025f4:	d418      	bmi.n	8002628 <_malloc_r+0x8c>
 80025f6:	2b0b      	cmp	r3, #11
 80025f8:	d90f      	bls.n	800261a <_malloc_r+0x7e>
 80025fa:	600b      	str	r3, [r1, #0]
 80025fc:	18cc      	adds	r4, r1, r3
 80025fe:	50cd      	str	r5, [r1, r3]
 8002600:	4630      	mov	r0, r6
 8002602:	f000 f836 	bl	8002672 <__malloc_unlock>
 8002606:	f104 000b 	add.w	r0, r4, #11
 800260a:	1d23      	adds	r3, r4, #4
 800260c:	f020 0007 	bic.w	r0, r0, #7
 8002610:	1ac3      	subs	r3, r0, r3
 8002612:	d0d3      	beq.n	80025bc <_malloc_r+0x20>
 8002614:	425a      	negs	r2, r3
 8002616:	50e2      	str	r2, [r4, r3]
 8002618:	e7d0      	b.n	80025bc <_malloc_r+0x20>
 800261a:	684b      	ldr	r3, [r1, #4]
 800261c:	428c      	cmp	r4, r1
 800261e:	bf16      	itet	ne
 8002620:	6063      	strne	r3, [r4, #4]
 8002622:	6013      	streq	r3, [r2, #0]
 8002624:	460c      	movne	r4, r1
 8002626:	e7eb      	b.n	8002600 <_malloc_r+0x64>
 8002628:	460c      	mov	r4, r1
 800262a:	6849      	ldr	r1, [r1, #4]
 800262c:	e7cc      	b.n	80025c8 <_malloc_r+0x2c>
 800262e:	1cc4      	adds	r4, r0, #3
 8002630:	f024 0403 	bic.w	r4, r4, #3
 8002634:	42a0      	cmp	r0, r4
 8002636:	d005      	beq.n	8002644 <_malloc_r+0xa8>
 8002638:	1a21      	subs	r1, r4, r0
 800263a:	4630      	mov	r0, r6
 800263c:	f000 f808 	bl	8002650 <_sbrk_r>
 8002640:	3001      	adds	r0, #1
 8002642:	d0cf      	beq.n	80025e4 <_malloc_r+0x48>
 8002644:	6025      	str	r5, [r4, #0]
 8002646:	e7db      	b.n	8002600 <_malloc_r+0x64>
 8002648:	200000ac 	.word	0x200000ac
 800264c:	200000b0 	.word	0x200000b0

08002650 <_sbrk_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	2300      	movs	r3, #0
 8002654:	4c05      	ldr	r4, [pc, #20]	; (800266c <_sbrk_r+0x1c>)
 8002656:	4605      	mov	r5, r0
 8002658:	4608      	mov	r0, r1
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	f7fe f856 	bl	800070c <_sbrk>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_sbrk_r+0x1a>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	b103      	cbz	r3, 800266a <_sbrk_r+0x1a>
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	20000118 	.word	0x20000118

08002670 <__malloc_lock>:
 8002670:	4770      	bx	lr

08002672 <__malloc_unlock>:
 8002672:	4770      	bx	lr

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
